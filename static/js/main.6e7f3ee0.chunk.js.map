{"version":3,"sources":["components/header.tsx","components/card.js","components/build.js","components/footer.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","style","color","href","target","icon","MarkGithub","LogoGithub","type","id","useStyles","makeStyles","card","width","backgroundColor","media","height","paddingTop","objectFit","test","display","justifyContent","CardStuff","props","classes","Card","CardActionArea","CardMedia","image","picture","title","name","CardContent","Typography","gutterBottom","variant","component","descr","CardActions","Button","size","link","CardReal","data","map","p","key","Build","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"m0BAKaA,EAAS,WACpB,OACE,gCACE,yBAAKC,UAAU,IACb,wBAAIC,MAAO,CAAEC,MAAO,SAAWF,UAAU,QAAzC,iBAIA,uBACEA,UAAU,OACVG,KAAK,6BACLF,MAAO,CAAEC,MAAO,SAChBE,OAAO,UAEP,kBAAC,IAAD,CAASC,KAAMC,MAEf,kBAAC,IAAD,CAASD,KAAME,QAGnB,yBAAKP,UAAU,aACb,2BAAOQ,KAAK,WAAWC,GAAG,aAAaT,UAAU,eACjD,6BACE,wBAAIC,MAAO,CAAEC,MAAO,SAAWF,UAAU,SAAzC,iBAGA,uBACEA,UAAU,QACVG,KAAK,6BACLF,MAAO,CAAEC,MAAO,SAChBE,OAAO,UAEP,kBAAC,IAAD,CAASC,KAAMC,MAEf,kBAAC,IAAD,CAASD,KAAME,W,wEC1BrBG,EAAYC,YAAW,CAC3BC,KAAM,CACJC,MAAO,IACPC,gBAAiB,UACjBZ,MAAO,SAETa,MAAO,CACLC,OAAQ,EACRC,WAAY,MACZC,UAAW,SAEbC,KAAM,CACJC,QAAS,OACTC,eAAgB,QAChBR,MAAO,IACPX,MAAO,aAILoB,EAAY,SAAAC,GAChB,IAAMC,EAAUd,IAEhB,OACE,kBAACe,EAAA,EAAD,CAAMzB,UAAWwB,EAAQZ,MACvB,kBAACc,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACE3B,UAAU,YACV4B,MAAOL,EAAMM,QACbC,MAAOP,EAAMQ,OAEf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAC7Cb,EAAMQ,MAET,kBAACE,EAAA,EAAD,CAAYE,QAAQ,QAAQjC,MAAM,gBAAgBkC,UAAU,KACzDb,EAAMc,SAIb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEJ,QAAQ,WACRK,KAAK,SACLtC,MAAM,UACNC,KAAMoB,EAAMkB,KACZrC,OAAO,UALT,iBAcKsC,EAAW,WACtB,OACE,6BACE,6BACE,yBAAK1C,UAAU,cACZ2C,EAAKC,KAAI,SAAAC,GAAC,OACT,kBAAC,EAAD,CACEd,KAAMc,EAAEd,KACRe,IAAKD,EAAEpC,GACP4B,MAAOQ,EAAER,MACTI,KAAMI,EAAEJ,KACRZ,QAASgB,EAAEhB,iBCxEZkB,EAAQ,WACnB,OACE,6BACE,yBAAK/C,UAAU,WACb,yBAAKA,UAAU,UACf,+BAGF,yBAAKA,UAAU,WACb,kBAAC,EAAD,SCXKgD,EAAS,WACpB,OACE,kCCgBWC,EAZO,WACpB,OACE,6BACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCHYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6e7f3ee0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../App.css\";\nimport { Container, Navbar, Nav } from \"react-bootstrap\";\nimport Octicon, { MarkGithub, LogoGithub } from \"@primer/octicons-react\";\n\nexport const Header = () => {\n  return (\n    <header>\n      <div className=\"\">\n        <h2 style={{ color: \"white\" }} className=\"logo\">\n          Carter Wagner\n        </h2>\n\n        <a\n          className=\"logo\"\n          href=\"https://github.com/cjwagn1\"\n          style={{ color: \"white\" }}\n          target=\"_blank\"\n        >\n          <Octicon icon={MarkGithub} />\n\n          <Octicon icon={LogoGithub} />\n        </a>\n      </div>\n      <div className=\"container\">\n        <input type=\"checkbox\" id=\"nav-toggle\" className=\"nav-toggle\" />\n        <nav>\n          <h2 style={{ color: \"white\" }} className=\"logoM\">\n            Carter Wagner\n          </h2>\n          <a\n            className=\"logoG\"\n            href=\"https://github.com/cjwagn1\"\n            style={{ color: \"white\" }}\n            target=\"_blank\"\n          >\n            <Octicon icon={MarkGithub} />\n\n            <Octicon icon={LogoGithub} />\n          </a>\n        </nav>\n      </div>\n    </header>\n  );\n};\n","import React from \"react\";\nimport \"../App.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport data from \"../data/card.json\";\n\nconst useStyles = makeStyles({\n  card: {\n    width: 250,\n    backgroundColor: \"#950740\",\n    color: \"white\"\n  },\n  media: {\n    height: 0,\n    paddingTop: \"80%\",\n    objectFit: \"cover\"\n  },\n  test: {\n    display: \"flex\",\n    justifyContent: \"right\",\n    width: 250,\n    color: \"#950740\"\n  }\n});\n\nconst CardStuff = props => {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.card}>\n      <CardActionArea>\n        <CardMedia\n          className=\"mediatest\"\n          image={props.picture}\n          title={props.name}\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {props.name}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            {props.descr}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n        <Button\n          variant=\"outlined\"\n          size=\"medium\"\n          color=\"default\"\n          href={props.link}\n          target=\"_blank\"\n        >\n          Learn more\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport const CardReal = () => {\n  return (\n    <div>\n      <div>\n        <div className=\"container1\">\n          {data.map(p => (\n            <CardStuff\n              name={p.name}\n              key={p.id}\n              descr={p.descr}\n              link={p.link}\n              picture={p.picture}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { CardReal } from \"./card.js\";\nimport React from \"react\";\nimport \"../App.css\";\nimport { Route, Switch } from \"react-router-dom\";\n\nexport const Build = () => {\n  return (\n    <div>\n      <div className=\"mainTop\">\n        <div className=\"logo1\" />\n        <div />\n      </div>\n\n      <div className=\"content\">\n        <CardReal />\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"../App.css\";\n\nexport const Footer = () => {\n  return (\n    <footer>\n   {/* / <footer className=\"footer\"> */}\n      {/* <svg\n        viewBox=\"0 -20 700 110\"\n        width=\"100%\"\n        height=\"110\"\n        preserveAspectRatio=\"none\"\n      >\n        <path\n          transform=\"translate(0, -20)\"\n          d=\"M0,10 c80,-22 240,0 350,18 c90,17 260,7.5 350,-20 v50 h-700\"\n          fill=\"#950740\"\n        />\n        <path\n          d=\"M0,10 c80,-18 230,-12 350,7 c80,13 260,17 350,-5 v100 h-700z\"\n          fill=\"#950740\"\n        />\n      </svg> */}\n    </footer>\n  );\n};\n","import React, { Component } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport { Header } from \"./components/header\";\nimport { Build } from \"./components/build.js\";\nimport { Footer } from \"./components/footer.js\";\n\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <div>\n        <Header />\n        <Build />\n        <Footer />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}