{"version":3,"sources":["components/header.tsx","components/card.js","components/build.js","components/footer.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","style","color","href","target","icon","MarkGithub","LogoGithub","type","id","useStyles","makeStyles","card","width","backgroundColor","media","height","paddingTop","objectFit","test","display","justifyContent","CardStuff","props","classes","Card","CardActionArea","CardMedia","image","picture","title","name","CardContent","Typography","gutterBottom","variant","component","descr","CardActions","Button","size","link","CardReal","data","map","p","key","Build","Footer","viewBox","preserveAspectRatio","transform","d","fill","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"m0BAKaA,EAAS,WACpB,OACE,gCACE,yBAAKC,UAAU,IACb,wBAAIC,MAAO,CAAEC,MAAO,SAAWF,UAAU,QAAzC,iBAIA,uBACEA,UAAU,OACVG,KAAK,6BACLF,MAAO,CAAEC,MAAO,SAChBE,OAAO,UAEP,kBAAC,IAAD,CAASC,KAAMC,MAEf,kBAAC,IAAD,CAASD,KAAME,QAGnB,yBAAKP,UAAU,aACb,2BAAOQ,KAAK,WAAWC,GAAG,aAAaT,UAAU,eACjD,6BACE,wBAAIC,MAAO,CAAEC,MAAO,SAAWF,UAAU,SAAzC,iBAGA,uBACEA,UAAU,QACVG,KAAK,6BACLF,MAAO,CAAEC,MAAO,SAChBE,OAAO,UAEP,kBAAC,IAAD,CAASC,KAAMC,MAEf,kBAAC,IAAD,CAASD,KAAME,W,wEC1BrBG,EAAYC,YAAW,CAC3BC,KAAM,CACJC,MAAO,IACPC,gBAAiB,UACjBZ,MAAO,SAETa,MAAO,CACLC,OAAQ,EACRC,WAAY,MACZC,UAAW,SAEbC,KAAM,CACJC,QAAS,OACTC,eAAgB,QAChBR,MAAO,IACPX,MAAO,aAILoB,EAAY,SAAAC,GAChB,IAAMC,EAAUd,IAEhB,OACE,kBAACe,EAAA,EAAD,CAAMzB,UAAWwB,EAAQZ,MACvB,kBAACc,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACE3B,UAAU,YACV4B,MAAOL,EAAMM,QACbC,MAAOP,EAAMQ,OAEf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAC7Cb,EAAMQ,MAET,kBAACE,EAAA,EAAD,CAAYE,QAAQ,QAAQjC,MAAM,gBAAgBkC,UAAU,KACzDb,EAAMc,SAIb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEJ,QAAQ,WACRK,KAAK,SACLtC,MAAM,UACNC,KAAMoB,EAAMkB,KACZrC,OAAO,UALT,iBAcKsC,EAAW,WACtB,OACE,6BACE,6BACE,yBAAK1C,UAAU,cACZ2C,EAAKC,KAAI,SAAAC,GAAC,OACT,kBAAC,EAAD,CACEd,KAAMc,EAAEd,KACRe,IAAKD,EAAEpC,GACP4B,MAAOQ,EAAER,MACTI,KAAMI,EAAEJ,KACRZ,QAASgB,EAAEhB,iBCxEZkB,EAAQ,WACnB,OACE,6BACE,yBAAK/C,UAAU,WACb,yBAAKA,UAAU,UACf,+BAGF,yBAAKA,UAAU,WACb,kBAAC,EAAD,SCXKgD,EAAS,WACpB,OACE,4BAAQhD,UAAU,UAChB,yBACEiD,QAAQ,gBACRpC,MAAM,OACNG,OAAO,MACPkC,oBAAoB,QAEpB,0BACEC,UAAU,oBACVC,EAAE,8DACFC,KAAK,YAEP,0BACED,EAAE,+DACFC,KAAK,eCEAC,EAZO,WACpB,OACE,6BACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCHYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bf8ef209.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../App.css\";\r\nimport { Container, Navbar, Nav } from \"react-bootstrap\";\r\nimport Octicon, { MarkGithub, LogoGithub } from \"@primer/octicons-react\";\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <header>\r\n      <div className=\"\">\r\n        <h2 style={{ color: \"white\" }} className=\"logo\">\r\n          Carter Wagner\r\n        </h2>\r\n\r\n        <a\r\n          className=\"logo\"\r\n          href=\"https://github.com/cjwagn1\"\r\n          style={{ color: \"white\" }}\r\n          target=\"_blank\"\r\n        >\r\n          <Octicon icon={MarkGithub} />\r\n\r\n          <Octicon icon={LogoGithub} />\r\n        </a>\r\n      </div>\r\n      <div className=\"container\">\r\n        <input type=\"checkbox\" id=\"nav-toggle\" className=\"nav-toggle\" />\r\n        <nav>\r\n          <h2 style={{ color: \"white\" }} className=\"logoM\">\r\n            Carter Wagner\r\n          </h2>\r\n          <a\r\n            className=\"logoG\"\r\n            href=\"https://github.com/cjwagn1\"\r\n            style={{ color: \"white\" }}\r\n            target=\"_blank\"\r\n          >\r\n            <Octicon icon={MarkGithub} />\r\n\r\n            <Octicon icon={LogoGithub} />\r\n          </a>\r\n        </nav>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"../App.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport data from \"../data/card.json\";\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    width: 250,\r\n    backgroundColor: \"#950740\",\r\n    color: \"white\"\r\n  },\r\n  media: {\r\n    height: 0,\r\n    paddingTop: \"80%\",\r\n    objectFit: \"cover\"\r\n  },\r\n  test: {\r\n    display: \"flex\",\r\n    justifyContent: \"right\",\r\n    width: 250,\r\n    color: \"#950740\"\r\n  }\r\n});\r\n\r\nconst CardStuff = props => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.card}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          className=\"mediatest\"\r\n          image={props.picture}\r\n          title={props.name}\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            {props.name}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            {props.descr}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions>\r\n        <Button\r\n          variant=\"outlined\"\r\n          size=\"medium\"\r\n          color=\"default\"\r\n          href={props.link}\r\n          target=\"_blank\"\r\n        >\r\n          Learn more\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport const CardReal = () => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <div className=\"container1\">\r\n          {data.map(p => (\r\n            <CardStuff\r\n              name={p.name}\r\n              key={p.id}\r\n              descr={p.descr}\r\n              link={p.link}\r\n              picture={p.picture}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { CardReal } from \"./card.js\";\r\nimport React from \"react\";\r\nimport \"../App.css\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\nexport const Build = () => {\r\n  return (\r\n    <div>\r\n      <div className=\"mainTop\">\r\n        <div className=\"logo1\" />\r\n        <div />\r\n      </div>\r\n\r\n      <div className=\"content\">\r\n        <CardReal />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nexport const Footer = () => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <svg\r\n        viewBox=\"0 -20 700 110\"\r\n        width=\"100%\"\r\n        height=\"110\"\r\n        preserveAspectRatio=\"none\"\r\n      >\r\n        <path\r\n          transform=\"translate(0, -20)\"\r\n          d=\"M0,10 c80,-22 240,0 350,18 c90,17 260,7.5 350,-20 v50 h-700\"\r\n          fill=\"#950740\"\r\n        />\r\n        <path\r\n          d=\"M0,10 c80,-18 230,-12 350,7 c80,13 260,17 350,-5 v100 h-700z\"\r\n          fill=\"#950740\"\r\n        />\r\n      </svg>\r\n    </footer>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { Header } from \"./components/header\";\r\nimport { Build } from \"./components/build.js\";\r\nimport { Footer } from \"./components/footer.js\";\r\n\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Header />\r\n        <Build />\r\n        <Footer />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n// {\r\n//     \"id\": 5,\r\n//     \"picture\": \"https://i.imgur.com/dA09iKU.png\",\r\n//     \"name\": \"Divine Weather\",\r\n//     \"descr\": \"\",\r\n//     \"link\": \"https://cjwagn1.github.io/Divine-weather/\"\r\n//   },\r\n"],"sourceRoot":""}